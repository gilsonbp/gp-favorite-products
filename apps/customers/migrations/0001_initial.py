# Generated by Django 3.1.1 on 2020-09-18 18:18

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="GpGroup",
            fields=[],
            options={
                "verbose_name": "Grupo",
                "verbose_name_plural": "Grupos",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.group",),
            managers=[("objects", django.contrib.auth.models.GroupManager()),],
        ),
        migrations.CreateModel(
            name="GpPermission",
            fields=[],
            options={
                "verbose_name": "Permissão",
                "verbose_name_plural": "Permissões",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.permission",),
            managers=[("objects", django.contrib.auth.models.PermissionManager()),],
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={"unique": "Esse email já existe."},
                        help_text="O email será usado para acessar o sistema e enviar informações",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Digite o nome completo do usuário.",
                        max_length=200,
                        verbose_name="Nome",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Apenas usuários ativos podem acessar o sistema.",
                        verbose_name="Ativo?",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Determina se o usuário tem acesso ao painel do sistema.",
                        verbose_name="Faz parte da equipe?",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Data de registro",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Os grupos que este usuário pertence. Um usuário terá todas as permissões concedidas a cada um dos seus grupos.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="grupos",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissões específicas para este usuário.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="permissões do usuário",
                    ),
                ),
            ],
            options={"verbose_name": "Usuário", "verbose_name_plural": "Usuários",},
        ),
    ]
